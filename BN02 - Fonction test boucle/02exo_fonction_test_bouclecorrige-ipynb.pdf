{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import doctest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fonctions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 1a : un triangle de zéros\n",
    "Ecrire la fonction `triangle_zeros(n)` qui écrit un triangle formé de n lignes de 0.  \n",
    "*Par exemple* : pour `triangle_zeros(4)` :  \n",
    "``` \n",
    "0\n",
    "0 0\n",
    "0 0 0\n",
    "0 0 0 0\n",
    "```\n",
    "Cette fonction est accompagnée d'une **docstring** qui précise :\n",
    "* les paramètres d'entrée\n",
    "* le role de la fonction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "0 \n",
      "0 0 \n",
      "0 0 0 \n",
      "0 0 0 0 \n"
     ]
    }
   ],
   "source": [
    "def triangle_zeros(n):\n",
    "    \"\"\"\n",
    "    Afficher un triangle de 0\n",
    "    \n",
    "    PARAM\n",
    "    -----\n",
    "    n(int) : nombre de lignes de 0\n",
    "    \n",
    "    RETURN\n",
    "    -------\n",
    "    None (rien n'est retourné)\n",
    "    \n",
    "    EXAMPLES\n",
    "    --------\n",
    "    >>> triangle_zéro(4)\n",
    "    0\n",
    "    0 0\n",
    "    0 0 0\n",
    "    0 0 0 0\n",
    "    \"\"\"\n",
    "    for i in range(n+1):\n",
    "        for j in range(i):\n",
    "            print(0,end=' ')\n",
    "        print()\n",
    "        \n",
    "triangle_zeros(4)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 1b : le volume d'une boule\n",
    "Ecrire la fonction qui calcule le volume d'une boule de rayon `r`.\n",
    "\n",
    "Rappel : $volume = 4/3*π*R^3/3$  \n",
    "\n",
    "Cette fonction est accompagnée d'une **docstring** qui précise :  \n",
    "* le paramètre d'entrée : le rayon de la boule\n",
    "* la sortie : le volume d'une boule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4849.048260815845"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#### Ecrire la fonction qui calcule le volume d'une boule avec son rayon.\n",
    "from math import pi\n",
    "\n",
    "def volume_boule(rayon) :\n",
    "    \"\"\"\n",
    "    Calcule le volume d'une boule en fonction du rayon\n",
    "    \n",
    "    PARAM\n",
    "    -----\n",
    "    rayon (int or float) : rayon de la boule\n",
    "    \n",
    "    RETURN\n",
    "    -------\n",
    "    (int or float) : le volume de la boule\n",
    "    \n",
    "    EXAMPLES\n",
    "    --------\n",
    "    >>> volume_boule(2)\n",
    "    33.510321638291124\n",
    "    >>> volume_boule(10.5)\n",
    "    4849.048260815845\n",
    "    \"\"\"\n",
    "# à compléter  \n",
    "    volume = 4*pi*rayon**3/3\n",
    "    return volume\n",
    "\n",
    "volume_boule(10.5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 1c : l'aire d'un triangle\n",
    "Ecrire la fonction qui calcule l'aire d'un triangle.  \n",
    "Cette fonction est accompagnée d'une **docstring** qui précise :\n",
    "* les paramètres d'entrée\n",
    "* la sortie (la valeur retournée)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "81.2"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#### Ecrire la fonction qui calcule l'aire d'un triangle\n",
    "def aire_triangle(base, hauteur) :\n",
    "    \"\"\"\n",
    "    Calcule l'aire d'un triangle\n",
    "        \n",
    "    PARAM\n",
    "    -----\n",
    "    base (int or float) : base du triangle\n",
    "    hauteur (int or float) : hauteur du triangle\n",
    "    \n",
    "    RETURN\n",
    "    -------\n",
    "    (int or float) : l'aire d'un triangle\n",
    "    \n",
    "    EXAMPLES\n",
    "    --------\n",
    "    >>> aire_triangle(6,5)\n",
    "    15.0\n",
    "    >>> aire_triangle(20.3,8)\n",
    "    81.2\n",
    "    \"\"\"\n",
    "# à compléter\n",
    "    aire = base*hauteur/2\n",
    "    return aire\n",
    "    \n",
    "\n",
    "## DEBUT DU PROGRAMME\n",
    "# Afficher l'aire d'un triangle de base=6 et hauteur=5  qui vaut 15.\n",
    "aire_triangle(6,5)\n",
    "aire_triangle(20.3,8)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 2 : f(x)\n",
    "Soit une fonction mathématique $f(x) = x² - 2x + 5$.  \n",
    "1°/ En Python, créer une fonction $f(x)$ qui retourne $x² - 2x + 5$.  \n",
    "2°/ Avec une boucle, afficher toutes ces images : $f(0), f(1), f(2), ..., f(10)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f(0)= 5\n",
      "f(1)= 4\n",
      "f(2)= 5\n",
      "f(3)= 8\n",
      "f(4)= 13\n",
      "f(5)= 20\n",
      "f(6)= 29\n",
      "f(7)= 40\n",
      "f(8)= 53\n",
      "f(9)= 68\n",
      "f(10)= 85\n"
     ]
    }
   ],
   "source": [
    "#### Calcul d'images pour : f(x) = x² -2x + 5.\n",
    "def fonction_f(x):\n",
    "    return x**2-2*x+5\n",
    "\n",
    "for i in range(11):\n",
    "    print(f'f({i})= {fonction_f(i)}')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 3 : QCM fonction\n",
    "1°/ a/ **QCM :** Qu'affiche le code suivant : ..........  \n",
    " &nbsp; &nbsp;  &nbsp; &nbsp; *A/ a+1  &nbsp; &nbsp; B/ test(5) &nbsp; &nbsp; C/ NameError &nbsp; &nbsp; D/ 6*  \n",
    " &nbsp; &nbsp; b/ **Auto-correction :** Lancer le programme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'test' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [6]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[43mtest\u001b[49m(\u001b[38;5;241m5\u001b[39m)\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mtest\u001b[39m(a):\n\u001b[0;32m      4\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m a\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'test' is not defined"
     ]
    }
   ],
   "source": [
    "x = test(5)\n",
    "\n",
    "def test(a):\n",
    "    return a+1\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2°/ a/ **QCM :** Qu'affiche le code suivant : ..........  \n",
    " &nbsp; &nbsp;  &nbsp; &nbsp; *A/ 0  &nbsp; &nbsp; B/ 5 &nbsp; &nbsp; C/ AffectationError &nbsp; &nbsp; D/ a*  \n",
    " &nbsp; &nbsp; b/ **Auto-correction :** Lancer le programme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "def test(a):\n",
    "    a = 5\n",
    "\n",
    "a = 0\n",
    "test(a)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3°/ a/ **QCM :** Qu'affiche le code suivant : ..........  \n",
    " &nbsp; &nbsp;  &nbsp; &nbsp; *A/ f(g(0))  &nbsp; &nbsp; B/ 2 &nbsp; &nbsp; C/ f(3) &nbsp; &nbsp; D/ -1*  \n",
    " &nbsp; &nbsp; b/ **Auto-correction :** Lancer le programme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "def f(x):\n",
    "    return 2*x-4\n",
    "\n",
    "def g(x):\n",
    "    return x+3\n",
    "\n",
    "print(f(g(0)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4°/ a/ **QCM :** Quelle est la valeur de la variable x à la fin de l'exécution du script suivant : ..........  \n",
    " &nbsp; &nbsp;  &nbsp; &nbsp; *A/ 0  &nbsp; &nbsp; B/ 1 &nbsp; &nbsp; C/ 2 &nbsp; &nbsp; D/ 3*  \n",
    " &nbsp; &nbsp; b/ **Auto-correction :** Ajouter un appel console de x et lancer le programme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def f(x):\n",
    "    x = x + 1\n",
    "    return x + 1\n",
    "\n",
    "x = 0\n",
    "f(x+1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Instructions conditionnelles"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 4 : signe de x avec `if`\n",
    "Créer une fonction `signe_nombre`qui retourne le signe d'un nombre sous la forme de `-1` et `1`.  \n",
    "\n",
    "_difficulté supplémentaire_ : Cette fonction retourne 0 si le nombre est nul."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "signe de -5 est -1\n",
      "signe de 3 est 1\n",
      "signe de 0 est 0\n",
      "signe de -1e-06 est -1\n"
     ]
    }
   ],
   "source": [
    "# le signe de x\n",
    "def signe(x):\n",
    "    if x < 0:\n",
    "        return -1\n",
    "    elif x== 0:\n",
    "        return 0\n",
    "    else :\n",
    "        return 1\n",
    "\n",
    "for element in [-5,3,0,-0.000001]:\n",
    "    print(f'signe de {element} est {signe(element)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 5 : ticket avec  `elif`\n",
    "\n",
    "Le ticket d'entrée d'un musée coûte :\n",
    "- 0 € pour les moins de 10 ans\n",
    "- 3 € pour les personnes entre 10 et 18 ans\n",
    "- 7 € pour les plus de 18 ans\n",
    "\n",
    "1. Créer une fonction qui, pour un âge `age` donné, renvoie le prix du ticket d'entrée `prix(age)`.  \n",
    "2. Ecrire la docstring de cette fonction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tarif pour 5 ans est 0\n",
      "tarif pour 10 ans est 3\n",
      "tarif pour 13 ans est 3\n",
      "tarif pour 18 ans est 7\n",
      "tarif pour 30 ans est 7\n"
     ]
    },
    {
     "ename": "AssertionError",
     "evalue": "un âge ne peut pas être négatif!",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Input \u001b[1;32mIn [11]\u001b[0m, in \u001b[0;36m<cell line: 23>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     21\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;241m7\u001b[39m\n\u001b[0;32m     23\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m element \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;241m5\u001b[39m,\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m13\u001b[39m,\u001b[38;5;241m18\u001b[39m,\u001b[38;5;241m30\u001b[39m,\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.000001\u001b[39m]:\n\u001b[1;32m---> 24\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtarif pour \u001b[39m\u001b[38;5;132;01m{\u001b[39;00melement\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m ans est \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mprix(element)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n",
      "Input \u001b[1;32mIn [11]\u001b[0m, in \u001b[0;36mprix\u001b[1;34m(age)\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mprix\u001b[39m(age):\n\u001b[0;32m      3\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;124;03m    Détermine le côut du ticket d'entrée en fonction de l'age\u001b[39;00m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;124;03m        \u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[38;5;124;03m    (int) : prix de son ticket\u001b[39;00m\n\u001b[0;32m     13\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m---> 15\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m(age\u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m),\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mun âge ne peut pas être négatif!\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m     16\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m age \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m10\u001b[39m:\n\u001b[0;32m     17\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;241m0\u001b[39m\n",
      "\u001b[1;31mAssertionError\u001b[0m: un âge ne peut pas être négatif!"
     ]
    }
   ],
   "source": [
    "# Prix du ticket de musée :\n",
    "def prix(age):\n",
    "    \"\"\"\n",
    "    Détermine le côut du ticket d'entrée en fonction de l'age\n",
    "        \n",
    "    PARAM\n",
    "    -----\n",
    "    age (int) : âge de la personne\n",
    "    \n",
    "    RETURN\n",
    "    -------\n",
    "    (int) : prix de son ticket\n",
    "    \"\"\"\n",
    "    \n",
    "    assert(age>=0),\"un âge ne peut pas être négatif!\"\n",
    "    if age < 10:\n",
    "        return 0\n",
    "    elif 10<= age <18:\n",
    "        return 3\n",
    "    else :\n",
    "        return 7\n",
    "\n",
    "for element in [5,10,13,18,30,-0.000001]:\n",
    "    print(f'tarif pour {element} ans est {prix(element)}')   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Boucles"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 6 : le jeu du nombre mystère \n",
    "\n",
    "Le programme choisit un nombre aléatoire entre 0 et 10. Puis l'utilisateur doit trouver ce nombre.  \n",
    "A chaque proposition du joueur, le programme indique si le nombre mystère est supérieur ou inférieur au nombre proposé.\n",
    "\n",
    "NB : Relire l'exemple de programme du cours : rubrique \"Les conditions if\" > paragraphe \"si .. alors .. sinon ..\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Proposer un nombre entier entre 0 et 10 inclus:2\n",
      "Le nombre mystère est supérieur à 2 .\n",
      "Proposer un autre nombre entier:4\n",
      "C'est gagné! Le nombre mystère est bien 4 .\n"
     ]
    }
   ],
   "source": [
    "# Le jeu du nombre mystère\n",
    "from random import randint\n",
    "\n",
    "nb=randint(0,10)\n",
    "choix=int(input(\"Proposer un nombre entier entre 0 et 10 inclus:\"))\n",
    "while nb != choix :\n",
    "    if nb < choix :\n",
    "        print(\"Le nombre mystère est inférieur à\",choix,\".\")\n",
    "    else :\n",
    "        print(\"Le nombre mystère est supérieur à\",choix,\".\")\n",
    "    choix=int(input(\"Proposer un autre nombre entier:\"))\n",
    "print(\"C'est gagné! Le nombre mystère est bien\",choix,\".\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 7 : produit de nombres (algorithme de cumul).\n",
    "\n",
    "Le programme demande une série de nombres à l'utilisateur et effectue le produit des nombres rentrés.\n",
    "\n",
    "Le programme s'arrête lorsque le client rentre le nombre 0 (et on ne fait pas le produit par 0).\n",
    "Il affiche alors le résultat du produit obtenu.\n",
    "\n",
    "Par exemple, si le client rentre les nombres 2, 6, -1, 3, 0 alors le programme affiche le résultat du produit -36."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entrer un nombre : 2\n",
      "Entrer un nombre : 6\n",
      "Entrer un nombre : -1\n",
      "Entrer un nombre : 3\n",
      "Entrer un nombre : 0\n",
      "Le produit est égal à :  -36\n"
     ]
    }
   ],
   "source": [
    "# Calculer le produit de nombres entrés à la volée.\n",
    "nb = int(input(\"Entrer un nombre : \"))\n",
    "produit = 1\n",
    "while nb != 0:    \n",
    "    produit = produit*nb\n",
    "    nb = int(input(\"Entrer un nombre : \"))\n",
    "print(\"Le produit est égal à : \", produit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 8 : somme 1 + 2 + 3 + ... + 100 (algorithme de cumul)\n",
    "\n",
    "Créer une fonction  `somme_facile()` qui calcule la somme des 100 premiers entiers S = 1 + 2 + 3 + ... + 100.  \n",
    "\n",
    "_difficulté supplémentaire_ : Créer une fonction `somme(n)`qui calcule la somme des n premiers entiers : 1 + 2 + ... + n."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5050\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# somme des 100 premiers entiers\n",
    "def somme_facile():\n",
    "    S = 0\n",
    "    for i in range(101):\n",
    "        S = S + i\n",
    "    return S\n",
    "\n",
    "\n",
    "# somme des n premiers entiers\n",
    "def somme(n):\n",
    "    assert (n>=0)\n",
    "    S = 0\n",
    "    for i in range(n+1):\n",
    "        S = S + i\n",
    "    return S    \n",
    "\n",
    "print(somme_facile())\n",
    "somme(5)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 9 : Chronométrer 3 multiplications\n",
    "Proposer à l'utilisateur des multiplications aléatoires. Au bout de 3 bonnes réponses, afficher le temps réalisé."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 * 9 = ? 45\n",
      "Gagné !\n",
      "10 * 4 = ? 40\n",
      "Gagné !\n",
      "7 * 8 = ? 56\n",
      "Gagné !\n",
      "Vous avez mis 7.973205327987671 s.\n"
     ]
    }
   ],
   "source": [
    "# Chronométrer 3 multiplications aléatoires\n",
    "from random import randint\n",
    "from time import time\n",
    "\n",
    "bonnes_reponses = 0\n",
    "temps_depart = time()\n",
    "while bonnes_reponses < 3:\n",
    "    nb1 = randint(0,10)\n",
    "    nb2 = randint(0,10)\n",
    "    reponse = int(input(str(nb1) + \" * \" + str(nb2) + \" = ? \"))\n",
    "    if reponse == (nb1*nb2) :\n",
    "        bonnes_reponses = bonnes_reponses + 1\n",
    "        print(\"Gagné !\")\n",
    "    else :\n",
    "        print(\"Perdu !\")\n",
    "temps_arrivee = time()\n",
    "duree = temps_arrivee - temps_depart\n",
    "print(f\"Vous avez mis {duree} s.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Un peu d'aide :**\n",
    "* Voici comment afficher un calcul et récupérer la réponse :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 * 7 = ? 35\n"
     ]
    }
   ],
   "source": [
    "# affiche \"5*7= ?\" et récupère la réponse\n",
    "a = 5\n",
    "b = 7\n",
    "n = int(input(str(a) + \" * \" + str(b) + \" = ? \"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* La fonction `time()` du module `time` permet de connaître le nombre de secondes qu'il s'est écoulé depuis le 1 janvier 1970.<br>Exécuter plusieurs fois la 2e cellule de code ci-dessous, et vous verrez ce grand nombre augmenter car *le temps passe .. !*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from time import time\n",
    "# pour afficher l'aide\n",
    "time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1694724987.7006073"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from time import time\n",
    "time() # un appel console"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* La fonction `randint(2,10)` du module `random` permet d'obtenir un entier aléatoire compris entre 2 et 10 (inclus).  \n",
    "Exécuter plusieurs fois la cellule ci-dessous."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from random import randint\n",
    "randint(2,10) # un appel console"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 10 : mot à l'envers\n",
    "Saisir un mot et écrire une fonction qui le renvoie écrit à l'envers. Voici 2 exemples obtenus en console :\n",
    "\n",
    "```console\n",
    "Entrez votre mot : Bonjour\n",
    "À l'endroit : Bonjour\n",
    "À l'envers : ruojnoB\n",
    "\n",
    "Entrez votre mot : kayak\n",
    "À l'endroit : kayak\n",
    "À l'envers : kayak\n",
    "C'est un palindrome !\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entrer votre mot :bonjour\n",
      "A l'endroit :  bonjour\n",
      "A l'envers : ruojnob\n"
     ]
    }
   ],
   "source": [
    "## Ecrire un mot à l'envers\n",
    "def alenvers(mot):\n",
    "    mot_a_l_envers = ''\n",
    "    for i in range(len(mot)-1,-1,-1):\n",
    "        mot_a_l_envers = mot_a_l_envers + mot[i]\n",
    "    return mot_a_l_envers\n",
    "\n",
    "choix = input(\"Entrer votre mot :\")\n",
    "print(\"A l'endroit : \",choix)\n",
    "choix_a_lenvers = alenvers(choix)\n",
    "print(\"A l'envers :\",choix_a_lenvers )\n",
    "if choix == choix_a_lenvers:\n",
    "    print(\"C'est un palindrome !\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 11 :  QCM fonction et boucle `for`\n",
    "Que vaut `j` à la fin de l'exécution de chaque fragment de code ?  \n",
    "*Réfléchissez d'abord, ... exécutez ensuite et enfin ... expliquez !*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "j = 0\n",
    "for i in range(10):\n",
    "    j += 1\n",
    "print(j) # on ajoute 1 à chaque tour de boucle et il y en a 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "j = 0\n",
    "for i in range(2, 10):\n",
    "    j += 1\n",
    "print(j) # on ajoute 1 à chaque tour de boucle et il y en a 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "j = 0\n",
    "for i in range(j, 10):\n",
    "    j += 1\n",
    "print(j) # on ajoute 1 à chaque tour de boucle et il y en a 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "j = 0\n",
    "for i in range(10):\n",
    "    j += j\n",
    "print(j) # on double la valeur de j à chaque tour de boucle mais il vaut 0 au début!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "j = 0\n",
    "for i in range(j):\n",
    "    j += 1\n",
    "print(j) # on ajoute 1 à chaque tour de boucle mais il n'y a aucun tour !"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 11b : QCM fonction et boucle `for`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1°/ a/ **QCM :** Dans quel cas la fonction mystere renvoie le booléen False ? : ..........  \n",
    " &nbsp; &nbsp;  &nbsp; &nbsp; *A/ mystere('alphabet')  &nbsp; &nbsp; B/ mystere('voyelle') &nbsp; &nbsp; C/ mystere('dictionnaire') &nbsp; &nbsp; D/ mystere('lettre')*  \n",
    " &nbsp; &nbsp; b/ **Auto-correction :**  Ajouter l'appel console `mystere('?????')` et lancer le programme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def mystere(texte):\n",
    "    status = False\n",
    "    for i in range(len(texte)-1):\n",
    "        if (texte[i] == texte[i+1]):\n",
    "            status = True\n",
    "    return status\n",
    "\n",
    "mystere('lettre')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2°/ a/ **QCM :** Que retourne l'instruction mystere('chocolat',4) ? : ..........  \n",
    " &nbsp; &nbsp;  &nbsp; &nbsp; *A/ 'cccchhhhoooollllaaaatttt'  &nbsp; &nbsp; B/ 'chocolatchocolatchocolatchocolat'  \n",
    "  &nbsp; &nbsp;  &nbsp; &nbsp; C/ 'ccccooooooooaaaa' &nbsp; &nbsp; D/ 'hhhhcccclllltttt'*  \n",
    " &nbsp; &nbsp; b/ **Auto-correction :** Ajouter l'appel console `mystere('chocolat',4)` et lancer le programme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ccccooooooooaaaa'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def mystere(texte,n):\n",
    "    chaine = \"\"\n",
    "    for i in range(len(texte)):\n",
    "        if (i % 2 == 0): \n",
    "            chaine = chaine + texte[i]*n\n",
    "    return chaine\n",
    "\n",
    "mystere('chocolat',4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 12 : QCM fonction et boucle `while`\n",
    "\n",
    "Soit n un entier naturel.  \n",
    "Sa factorielle est le produit des nombres entiers strictement positifs qui sont plus petits ou égaux à n.  \n",
    "Par exemple : la factorielle de 4 vaut  4\\*3\\*2\\*1 donc 24.\n",
    "\n",
    "Parmi ces fonctions, une seule retourne bien la factorielle de n. Lequel ? C.\n",
    "\n",
    "**Auto-correction :** Ajouter l'appel console `factorielle(4)` et lancer le programme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Réponse A :\n",
    "def factorielle(n):\n",
    "    i = 0\n",
    "    fact = 1\n",
    "    while i <= n:\n",
    "        fact = fact * i\n",
    "        i = i + 1\n",
    "    return fact"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Réponse B :\n",
    "def factorielle(n):\n",
    "    i = 1\n",
    "    fact = 1\n",
    "    while i < n:\n",
    "        fact = fact * i\n",
    "        i = i + 1\n",
    "    return fact"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Réponse C :\n",
    "def factorielle(n):\n",
    "    i = 0\n",
    "    fact = 1\n",
    "    while i < n:\n",
    "        i = i + 1\n",
    "        fact = fact * i\n",
    "    return fact\n",
    "factorielle(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Réponse D :\n",
    "def factorielle(n):\n",
    "    i = 0\n",
    "    fact = 1\n",
    "    while i <= n:\n",
    "        i = i + 1\n",
    "        fact = fact * i\n",
    "    return fact"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dessiner avec Turtle\n",
    "\n",
    "La bibliothèque **turtle** permet de dessiner à l'écran.<br>\n",
    "Le petit programme commenté ci-dessous permet d'obtenir un tracé intéressant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import *      # On importe la bibliothèque turtle\n",
    "\n",
    "speed(10)                 # On règle la vitesse du tracé (un entier compris entre 1 et 10)\n",
    "color('red', 'yellow')    # On fixe la couleur du tracé à 'rouge' et la couleur de rempissage à 'jaune'\n",
    "begin_fill()\n",
    "for i in range(36):\n",
    "    forward(200)          # La tortue avance de 200 pixels \n",
    "    left(170)             # La tortue tourne vers la gauche de 170°\n",
    "end_fill()\n",
    "done()                    # Il faut terminer par done() pour lancer l'exécution du tracé    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Voici quelques fonctionnalités de turtle :\n",
    "\n",
    "<style>\n",
    "        td{\n",
    "            color : green;\n",
    "        }\n",
    "</style>\n",
    "\n",
    "<table>\n",
    "    <tr><th style=\"border:1px solid #000000; background-color:pink; text-align: center;\">Fonction</th><th style=\"text-align:center;border:1px solid #000000; background-color:pink;\">Description</th></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>forward(x)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Déplace la tortue de x pixels en marche avant.</td></tr> \n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>backward(x)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Déplace la tortue de x pixels en marche arrière.</td></tr> \n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>left(x)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Fait pivoter la tortue d'un angle de x degrés vers la gauche.</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>right(x)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Fait pivoter la tortue d'un angle de x degrés vers la droite.</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>goto(x,y)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Déplace la tortue au point de corrdonnées (x,y). Attention, l'axe des y est orienté vers le haut de l'écran comme en mathématiques!</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>penup()</code></td><td style=\"border:1px solid #000000; text-align: center;\">Lève le crayon (la tortue arrêtera de tracer).</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>pendown()</code></td><td style=\"border:1px solid #000000; text-align: center;\">Abaisse le crayon. La tortue se remettra à tracer.</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>hideturtle()</code></td><td style=\"border:1px solid #000000; text-align: center;\">Cache la tortue.</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>showturtle()</code></td><td style=\"border:1px solid #000000; text-align: center;\">Fait réapparaitre la tortue.</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>speed(n)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Règle la vitesse du tracé. n est un entier compris entre 0 et 10. 1 correspond à une vitesse lente, 10 correspond à une vitesse rapide. 0 permet d'obtenir un tracé instantané.</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>done()</code></td><td style=\"border:1px solid #000000; text-align: center;\">Lance l'exécution du tracé.</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>circle(r)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Trace un cercle de rayon r.<br>\n",
    "        On peut ajouter une deuxième paramètre facultatif a si on souhaite tracer seulement tracer un arc de cercle d'angle a.</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>color(couleur1,couleur2)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Définir la couleur du tracé (couleur1) et la couleur de remplissage (couleur2).</td></tr>\n",
    "    <tr><td style=\"border:1px solid #000000; text-align: center;\"><code>width(n)</code></td><td style=\"border:1px solid #000000; text-align: center;\">Règle l'épaisseur du trait à n pixels.</td></tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 13 : \n",
    "Ecrire un programme qui utilise une boucle <code>for</code> pour tracer un carré de côté 100 pixels, avec un contour bleu et colorié en vert."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import *\n",
    "\n",
    "color('blue', 'green') \n",
    "begin_fill()\n",
    "for i in range(4):\n",
    "    forward(100)\n",
    "    left(90)\n",
    "end_fill()\n",
    "done()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 14 : \n",
    "Ecrire un programme qui trace 10 cercles dont les rayons sont 10, 20, 30, ..., 100.<br>\n",
    "Choisir une couleur de tracé et une couleur de remplissage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import *\n",
    "\n",
    "color('red', 'pink') \n",
    "speed(10)\n",
    "begin_fill()\n",
    "for i in range(1,11):\n",
    "    circle(10*i)    \n",
    "end_fill()\n",
    "done()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 15 :  \n",
    "Dessiner le drapeau de la France avec Turtle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import *\n",
    "\n",
    "color('black', 'blue') \n",
    "begin_fill()\n",
    "for i in range(2):\n",
    "    forward(100)\n",
    "    left(90)\n",
    "    forward(200)\n",
    "    left(90)\n",
    "end_fill()\n",
    "forward(100)\n",
    "\n",
    "color('black', 'white') \n",
    "begin_fill()\n",
    "for i in range(2):\n",
    "    forward(100)\n",
    "    left(90)\n",
    "    forward(200)\n",
    "    left(90)\n",
    "end_fill()\n",
    "forward(100)\n",
    "\n",
    "color('black', 'red') \n",
    "begin_fill()\n",
    "for i in range(2):\n",
    "    forward(100)\n",
    "    left(90)\n",
    "    forward(200)\n",
    "    left(90)\n",
    "end_fill()\n",
    "forward(100)\n",
    "\n",
    "done()"
   ]
  },
  {
   "attachments": {
    "diamant.svg": {
     "image/svg+xml": [
      ""
     ]
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercice 16 : \n",
    "Ecrire un programme qui dessine le diamant ci-dessous.\n",
    "![diamant.svg](attachment:diamant.svg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import *\n",
    "\n",
    "speed(10)\n",
    "color('blue') \n",
    "goto(-250,0)\n",
    "goto(250,0)\n",
    "for i in range(11):\n",
    "    goto(0,100)\n",
    "    goto(i*50-250,0)   \n",
    "    goto(0,-100)\n",
    "done()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercice facultatif : ipythonblocks\n",
    "1°/ Exécuter et lire le code de ce programme.  \n",
    "2°/ Modifier le programme pour avoir : 5 cyan + 5 rouges + 10 noires.  \n",
    "*ou tout autre combinaison que vous demandera votre voisin ...*\n",
    "\n",
    "*difficulté supplémentaire : __en 2D__* : on peut aussi travailler les double boucles avec une grille carrée de 20x20 (20 lignes x 20 colonnes).\n",
    "```python\n",
    "grid = BlockGrid(20, 20, block_size=30) # grille carrée de 20x20\n",
    "for i in range(20):\n",
    "    for j in range(20):\n",
    "        carré = grid[j , i]  # placé en (i,j) : i-ième colonne & j-ième ligne\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: ipythonblocks in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (1.9.0)\n",
      "Requirement already satisfied: requests>=1.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipythonblocks) (2.28.1)\n",
      "Requirement already satisfied: notebook>=4.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipythonblocks) (6.4.12)\n",
      "Requirement already satisfied: ipython>=4.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipythonblocks) (8.4.0)\n",
      "Requirement already satisfied: decorator in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (5.1.1)\n",
      "Requirement already satisfied: setuptools>=18.5 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (58.1.0)\n",
      "Requirement already satisfied: traitlets>=5 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (5.3.0)\n",
      "Requirement already satisfied: stack-data in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (0.3.0)\n",
      "Requirement already satisfied: matplotlib-inline in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (0.1.3)\n",
      "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (3.0.29)\n",
      "Requirement already satisfied: pickleshare in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (0.7.5)\n",
      "Requirement already satisfied: jedi>=0.16 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (0.18.1)\n",
      "Requirement already satisfied: colorama in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (0.4.5)\n",
      "Requirement already satisfied: backcall in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (0.2.0)\n",
      "Requirement already satisfied: pygments>=2.4.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipython>=4.0->ipythonblocks) (2.12.0)\n",
      "Requirement already satisfied: jupyter-client>=5.3.4 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (7.3.4)\n",
      "Requirement already satisfied: Send2Trash>=1.8.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (1.8.0)\n",
      "Requirement already satisfied: jupyter-core>=4.6.1 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (4.10.0)\n",
      "Requirement already satisfied: nest-asyncio>=1.5 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (1.5.5)\n",
      "Requirement already satisfied: ipykernel in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (6.15.0)\n",
      "Requirement already satisfied: terminado>=0.8.3 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (0.15.0)\n",
      "Requirement already satisfied: ipython-genutils in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (0.2.0)\n",
      "Requirement already satisfied: tornado>=6.1 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (6.1)\n",
      "Requirement already satisfied: prometheus-client in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (0.14.1)\n",
      "Requirement already satisfied: nbformat in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (5.4.0)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (3.1.2)\n",
      "Requirement already satisfied: pyzmq>=17 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (23.1.0)\n",
      "Requirement already satisfied: argon2-cffi in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (21.3.0)\n",
      "Requirement already satisfied: nbconvert>=5 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from notebook>=4.0->ipythonblocks) (6.5.0)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from requests>=1.0->ipythonblocks) (1.26.9)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from requests>=1.0->ipythonblocks) (3.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from requests>=1.0->ipythonblocks) (2022.6.15)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from requests>=1.0->ipythonblocks) (2.0.12)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from jedi>=0.16->ipython>=4.0->ipythonblocks) (0.8.3)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from jupyter-client>=5.3.4->notebook>=4.0->ipythonblocks) (2.8.2)\n",
      "Requirement already satisfied: entrypoints in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from jupyter-client>=5.3.4->notebook>=4.0->ipythonblocks) (0.4)\n",
      "Requirement already satisfied: pywin32>=1.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from jupyter-core>=4.6.1->notebook>=4.0->ipythonblocks) (304)\n",
      "Requirement already satisfied: nbclient>=0.5.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (0.6.4)\n",
      "Requirement already satisfied: mistune<2,>=0.8.1 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (0.8.4)\n",
      "Requirement already satisfied: bleach in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (5.0.0)\n",
      "Requirement already satisfied: packaging in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (21.3)\n",
      "Requirement already satisfied: tinycss2 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (1.1.1)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (2.1.1)\n",
      "Requirement already satisfied: jupyterlab-pygments in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (0.2.2)\n",
      "Requirement already satisfied: beautifulsoup4 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (4.11.1)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (1.5.0)\n",
      "Requirement already satisfied: defusedxml in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbconvert>=5->notebook>=4.0->ipythonblocks) (0.7.1)\n",
      "Requirement already satisfied: jsonschema>=2.6 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbformat->notebook>=4.0->ipythonblocks) (4.6.0)\n",
      "Requirement already satisfied: fastjsonschema in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from nbformat->notebook>=4.0->ipythonblocks) (2.15.3)\n",
      "Requirement already satisfied: wcwidth in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0->ipythonblocks) (0.2.5)\n",
      "Requirement already satisfied: pywinpty>=1.1.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from terminado>=0.8.3->notebook>=4.0->ipythonblocks) (2.0.5)\n",
      "Requirement already satisfied: argon2-cffi-bindings in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from argon2-cffi->notebook>=4.0->ipythonblocks) (21.2.0)\n",
      "Requirement already satisfied: debugpy>=1.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipykernel->notebook>=4.0->ipythonblocks) (1.6.0)\n",
      "Requirement already satisfied: psutil in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from ipykernel->notebook>=4.0->ipythonblocks) (5.9.1)\n",
      "Requirement already satisfied: executing in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from stack-data->ipython>=4.0->ipythonblocks) (0.8.3)\n",
      "Requirement already satisfied: asttokens in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from stack-data->ipython>=4.0->ipythonblocks) (2.0.5)\n",
      "Requirement already satisfied: pure-eval in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from stack-data->ipython>=4.0->ipythonblocks) (0.2.2)\n",
      "Requirement already satisfied: attrs>=17.4.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from jsonschema>=2.6->nbformat->notebook>=4.0->ipythonblocks) (21.4.0)\n",
      "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from jsonschema>=2.6->nbformat->notebook>=4.0->ipythonblocks) (0.18.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from python-dateutil>=2.8.2->jupyter-client>=5.3.4->notebook>=4.0->ipythonblocks) (1.16.0)\n",
      "Requirement already satisfied: cffi>=1.0.1 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.0->ipythonblocks) (1.15.0)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.0->ipythonblocks) (2.3.2.post1)\n",
      "Requirement already satisfied: webencodings in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from bleach->nbconvert>=5->notebook>=4.0->ipythonblocks) (0.5.1)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from packaging->nbconvert>=5->notebook>=4.0->ipythonblocks) (3.0.9)\n",
      "Requirement already satisfied: pycparser in c:\\users\\coqro\\appdata\\roaming\\edupyter-39-1.5\\apps\\lib\\site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.0->ipythonblocks) (2.21)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip available: 22.2.2 -> 23.2.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "# il faudra d'abord installer la librairie ipythonblocks dans votre jupyter\n",
    "%pip install ipythonblocks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">table.blockgrid {border: none;} .blockgrid tr {border: none;} .blockgrid td {padding: 0px;} #blocks5b9be6db-23bd-4007-94cc-dd5853563197 td {border: 1px solid white;}</style><table id=\"blocks5b9be6db-23bd-4007-94cc-dd5853563197\" class=\"blockgrid\"><tbody><tr><td title=\"Index: [0, 0]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 1]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 2]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 3]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 4]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 5]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 6]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 7]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 8]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 9]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 10]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 11]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 12]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 13]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 14]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 15]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 16]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 17]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 18]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 19]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td></tr></tbody></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from ipythonblocks import BlockGrid, colors\n",
    "\n",
    "# Une grille avec 1 ligne et 20 carrés noirs de 30px\n",
    "grid = BlockGrid(20, 1, block_size=30)\n",
    "\n",
    "for i in range(20):\n",
    "    carré = grid[0 , i]\n",
    "    \n",
    "    # On recolorie les derniers carrés en Cyan\n",
    "    if i >= 15 :\n",
    "        carré.rgb = colors['DarkCyan']\n",
    "    elif i in range(10):\n",
    "        # On recolorie les 10 promiers carrés en rouge\n",
    "        carré.rgb = colors['FireBrick']\n",
    "\n",
    "grid.show() # on affiche la grille"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">table.blockgrid {border: none;} .blockgrid tr {border: none;} .blockgrid td {padding: 0px;} #blocks9995c48e-51a7-45aa-ad92-991e57a18906 td {border: 1px solid white;}</style><table id=\"blocks9995c48e-51a7-45aa-ad92-991e57a18906\" class=\"blockgrid\"><tbody><tr><td title=\"Index: [0, 0]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 1]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 2]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 3]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 4]&#10;Color: (0, 139, 139)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 139, 139);\"></td><td title=\"Index: [0, 5]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 6]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 7]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 8]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 9]&#10;Color: (178, 34, 34)\" style=\"width: 30px; height: 30px;background-color: rgb(178, 34, 34);\"></td><td title=\"Index: [0, 10]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 11]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 12]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 13]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 14]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 15]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 16]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 17]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 18]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td><td title=\"Index: [0, 19]&#10;Color: (0, 0, 0)\" style=\"width: 30px; height: 30px;background-color: rgb(0, 0, 0);\"></td></tr></tbody></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from ipythonblocks import BlockGrid, colors\n",
    "\n",
    "# Une grille avec 1 ligne et 20 carrés noirs de 30px\n",
    "grid = BlockGrid(20, 1, block_size=30)\n",
    "\n",
    "for i in range(20):\n",
    "    carré = grid[0 , i]\n",
    "    \n",
    "    # On recolorie les derniers carrés en Cyan\n",
    "    if i < 5 :\n",
    "        carré.rgb = colors['DarkCyan']\n",
    "    elif i < 10:\n",
    "        # On recolorie les 10 promiers carrés en rouge\n",
    "        carré.rgb = colors['FireBrick']\n",
    "grid.show() # on affiche la grille"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
